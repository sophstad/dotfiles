set nocompatible
set number                      " show current line number even in relative mode
set termguicolors
filetype off
syntax enable

call plug#begin()

" Plugin 'chriskempson/tomorrow-theme', {'rtp': 'vim/'}
Plug 'base16-project/base16-vim'
" Plugin 'ctrlpvim/ctrlp.vim'
Plug 'fatih/vim-go'
Plug 'jeffkreeftmeijer/vim-numbertoggle'
Plug 'jparise/vim-graphql'
Plug 'pangloss/vim-javascript'
Plug 'leafgarland/typescript-vim'
Plug 'MaxMEllon/vim-jsx-pretty'
" Plugin 'raimondi/delimitmate'
" Plugin 'roman/golden-ratio'
" Plugin 'tomtom/tcomment_vim'
" Plugin 'tpope/vim-endwise'
" Plugin 'Valloric/YouCompleteMe'
Plug 'dense-analysis/ale'
" Plugin 'wincent/command-t'
Plug 'jiangmiao/auto-pairs'
Plug 'neoclide/coc.nvim', { 'branch': 'release'}

call plug#end()

filetype plugin indent on       " fix html and js indenting

set autoindent
set backspace=2                 " fix broken backspace in some setups
set clipboard=unnamed           " yank and paste with the system clipboard
set directory-=.                " don't store swapfiles in the current directory
set expandtab                   " expand tabs to spaces
set ignorecase                  " case-insensitive search
set incsearch                   " search as you type
set laststatus=2                " always show statusline
set ruler                       " show where you are
set scrolloff=3                 " show context above/below cursorline
set shiftwidth=2                " normal mode indentation commands use 2 spaces
set smartcase                   " case-sensitive search if any caps
set smartindent
set softtabstop=2               " insert mode tab and backspace use 2 spaces
set splitbelow
set splitright
set tabstop=8                   " actual tabs occupy 8 characters
set wildmode=longest:full
set wildchar=<Tab>
set wildmenu

colorscheme base16-tomorrow-night

" Open vim to previous location
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$") | exe "normal! g`\"" | endif
endif

" ############################ keyboard shortcuts ############################

" vim hard mode, forget those arrow keys!!
" noremap <up> <nop>
" noremap <down> <nop>
" noremap <left> <nop>
" noremap <right> <nop>
" inoremap <up> <nop>
" inoremap <down> <nop>
" inoremap <left> <nop>
" inoremap <right> <nop>

" correct :W to :w, :Q to :q, & :Wq to :wq
cnoreabbrev <expr> W ((getcmdtype() is# ':' && getcmdline() is# 'W')?('w'):('W'))
cnoreabbrev <expr> Q ((getcmdtype() is# ':' && getcmdline() is# 'Q')?('q'):('Q'))
cnoreabbrev <expr> Wq ((getcmdtype() is# ':' && getcmdline() is# 'Wq')?('wq'):('Wq'))

let mapleader = ','

nnoremap <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" Copy the current filename
nmap ,cs :let @*=expand("%")<CR>

" fix my syntax highlightings
" au BufNewFile,BufRead *.json.jbuilder set ft=ruby"
" au BufNewFile,BufRead *.ejs set ft=html
" au BufNewFile,BufRead *.xm set filetype=objc
" au BufNewFile,BufRead Vagrantfile set ft=ruby"

" ignore node_modules DS_Store and git when using ctrlp
" let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'

" use prettier js linter
let g:ale_fixers = {
\   'css': ['prettier'],
\   'javascript': ['prettier'],
\   'typescript': ['prettier', 'eslint'],
\   'typescriptreact': ['prettier', 'eslint']
\}

let g:ale_linters = {
\  'typescript': ['eslint']
\}

let g:ale_typescript_prettier_use_local_config = 1

" Set this variable to 1 to fix files when you save them.
let g:ale_fix_on_save = 1

let g:ale_linters_explicit = 1

let g:ale_linter_aliases = {'typescriptreact': 'typescript'}

" make .txt files have the same syntax highlighting as .md files
au BufRead,BufNewFile *.txt set syntax=markdown

" Follow links within .rST files using 'gf'
let &includeexpr = 'substitute(v:fname,"^/",substitute(system("git rev-parse --show-cdup"),"\n$","", ""), "")'

" :w!! 
" write the file when you accidentally opened it without root privileges
cmap w!! w !sudo tee % > /dev/null
